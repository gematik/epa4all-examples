@Library('gematik-jenkins-shared-library') _

def CREDENTIAL_ID_GEMATIK_GIT = 'svc_gitlab_prod_credentials'
def REPO_URL = createGitUrl('git/eurovision/epa4all-examples')
def BRANCH = 'main'
def JIRA_PROJECT_ID = 'OPNCP'
def GITLAB_PROJECT_ID = '1480'
def RELEASE_TEXT = 'Release'
def POM_PATH = 'pom.xml'

pipeline {
    options {
        disableConcurrentBuilds()
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')
        skipDefaultCheckout()
    }
    agent { label 'k8-backend-small' }

    parameters {
        string(name: 'NEW_VERSION', defaultValue: '', description: 'Bitte die nächste Version für das Projekt eingeben, format [0-9]+.[0-9]+.[0-9]+ \nHinweis: Version 0.0.[0-9] ist keine gültige Version!')
    }
	
	environment {
		TAGNAME = "${RELEASE_TEXT}-${RELEASE_VERSION}"
	}

    stages {
        stage('Initialise') {
            steps {
				useJdk("OPENJDK21")
                gitSetIdentity()
				checkVersion(NEW_VERSION)
            }
        }
		
		stage('Checkout') {
            steps {
                git branch: BRANCH,
                credentialsId: CREDENTIAL_ID_GEMATIK_GIT,
                url: REPO_URL
            }
        }  

        stage('set Version') {
			steps {
				mavenSetVersion(RELEASE_VERSION, POM_PATH)
			}
		}
		 
		stage('Build') {
			steps {
				mavenBuild(POM_PATH)
			}
		}
		 
		stage('Test') {
			steps {
				mavenTest(POM_PATH, "", false)
			}
		}
		 
		stage('deploy') {
			steps {
				mavenDeploy(POM_PATH)
			}
		}
		 
		stage('Create Release-Tag') {
			steps {
				gitCreateAndPushTag(JIRA_PROJECT_ID, TAGNAME, BRANCH)
			}
		}
		 
		stage('Create GitLab Release') {
			steps {
				gitLabCreateMavenRelease(JIRA_PROJECT_ID, GITLAB_PROJECT_ID, RELEASE_TEXT, RELEASE_VERSION, TAGNAME, POM_PATH)
			}
		}
		 
		stage('Release Jira-Version') {
			steps {
				jiraReleaseVersion(JIRA_PROJECT_ID, RELEASE_VERSION)
			}
		}
		 
		stage('Create New Jira-Version') {
			steps {
				jiraCreateNewVersion(JIRA_PROJECT_ID, NEW_VERSION)
			}
		}
		 
		stage('UpdateProject with new Version') {
			steps {
				mavenSetVersion("${NEW_VERSION}-SNAPSHOT")
				gitPushVersionUpdate(JIRA_PROJECT_ID, "${NEW_VERSION}-SNAPSHOT", BRANCH)
			}
		}
    }
    post {
        always {
            sendEMailNotification(getEuroVisionEMailList())
        }
    }
}